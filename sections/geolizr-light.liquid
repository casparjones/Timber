{% comment %}
Alle Funktionen der Geolizr Location Ampel wird in dieser Section gebaut.
Die Section wird eingebunden in der theme.liquid nach der Section 'header'
Für die Produkt Detail Seite wurde über Costomize in der "product.json" das Custom Liquid eingebunden für den Platzhalter.
Der Platzhalter für die Ampel wird in dem Sections 'product.quick-buy-drawer.json' & 'product.quick-buy-popover.json' eingebunden.
Zusätzlich wird über das custom Liquid ein snippet geladen, das die Daten zum Produkt sammelt und für die Ampel bereit stellt.
{% endcomment %}

{% assign variant = product.selected_or_first_available_variant %}
<section class="section {% unless blends_with_background %}section--flush{% endunless %}">
  <script id="geolizr_location_light_script">
    {% assign llSettings = section.settings %}

    // geolizr light settings
    Geolizr.lightSettings = {};
    Geolizr.lightSettings.country = [];
    {% assign parts = llSettings.geolizr_location_parts | newline_to_br | split: '<br />'%}
    {%- for part in parts -%}
      {%- assign part_options = part | split: "=>" -%}
      {%- assign part_country = part_options[0] | strip -%}
      {%- assign part_text = part_options[1] | strip -%}
      Geolizr.lightSettings.country.push({'country_code': '{{ part_country }}', 'text': '{{ part_text | escape }}'});
    {%- endfor -%}
    Geolizr.lightSettings.show_exact_product_inventory = {{ llSettings.show_exact_product_inventory }};
    Geolizr.lightSettings.full_text = '{{ llSettings.geolizr_location_parts_full | escape }}';
    Geolizr.lightSettings.less_text = '{{ llSettings.geolizr_location_parts_less | escape }}';
    Geolizr.lightSettings.exact_inventory_full_text = '{{ llSettings.geolizr_location_exact_parts_full | escape }}';
    Geolizr.lightSettings.exact_inventory_less_text = '{{ llSettings.geolizr_location_exact_parts_less | escape }}';
    Geolizr.lightSettings.exact_inventory_less_text_singular = '{{ llSettings.geolizr_location_exact_parts_less_singular | escape }}';
    Geolizr.lightSettings.zero_text = '{{ llSettings.geolizr_location_parts_zero | escape }}';
    Geolizr.lightSettings.fallback_text = '{{ llSettings.geolizr_location_fallback_text | escape }}';
    Geolizr.lightSettings.block_text = '{{ llSettings.geolizr_location_geo_block_text_popup|escape}}';
    Geolizr.lightSettings.button_block_text = '{{ llSettings.geolizr_location_geo_block_text|escape}}';
    Geolizr.lightSettings.debug_country = '{{ llSettings.debug_country }}';
    Geolizr.lightSettings.template = '{{ template.name }}';
  </script>
  <script id="geolizr_location_light_script_template" type="text/template">
  <div id="shipping-badge-wrapper"> 
    <div id="shipping-badge" class="shipping-badge"> 
      <span class="inner"></span>
    </div>
  </div>
  </script>
  <style>
    /* geolizr badge */
    .shipping-badge {
      width: 100%;
      height: auto;
      padding-left: 2px;
    }

    #geolizr-location-light {
      opacity: 0;  
      transition: opacity 0.4s linear;
      margin-top: -10px;
      margin-bottom: -16px;
    }
    
    .product-form__buy-buttons {
      margin-top: -6px;
    }

    .shiping-badge-show {
      opacity: 1 !important;
    }

    .shipping-badge span {
      color: #008b10;
      font-size: 14px;
      font-weight: 700;
      line-height: 1em;
      letter-spacing: .5px;
    }


    .shipping-badge.geolizr-location-less span {
      color: #FA9900;
    }

    .shipping-badge.geolizr-location-zero span {
      color: #FF0000;
    }

    .geolizr-atc-add span {
      color: #008b10 !important;
    }
    .shipping-badge span:before {
      content: "";
      display: inline-block;
      position: relative;
      top: -1px;
      width: 7px;
      height: 7px;
      margin-right: 4px;
      border-radius: 50%;
      background: #008b10;
    }

    .shipping-badge.geolizr-location-zero span:before {
      background: #FF0000;
    }

    .shipping-badge.geolizr-location-less span:before {
      background: #FFBF00;
    }

    .shipping-badge.geolizr-atc-add span:before {
      background: #008b10 !important;
    }
    
    button.geolizr-disabled {
      line-height: 20px;
      padding: 10px;
    }

    .geolizr-block-popup { top: -100px; background-color: #ff7803; }
    .geolizr-block-popup .swal2-icon.swal2-info { border-color: #fff; color: #fff; }
    .geolizr-block-popup .swal2-html-container { color: #fff; }
    .geolizr-block-popup { top: -100px; background-color: #ff7803; }
    .geolizr-block-popup .swal2-icon.swal2-info { border-color: #fff; color: #fff; }
    .geolizr-block-popup .swal2-html-container { color: #fff; }
  </style>
  <script>
  if(typeof GeolizrLight === "undefined") {  
    class GeolizrLight {
      constructor() {
        this.preorder_old = "";
        this.settings = Geolizr.lightSettings;
        this.showBlockPopup = false;
        this.removeCbb = false;
        this.variant = null;
        if(this.settings.template == 'product') {
          this.type = "default";
        } else {
          this.type = "quickview";
        }
        
      }

      waitOnPageRender(elementSelector) {
        return new Promise(function(resolver, reject) {
          let internalCount = 0;
          let interval = setInterval(function() {
            internalCount++;
            if (internalCount < 100000) {
              if (document.querySelector(elementSelector) !== null) {
                resolver();
                clearInterval(interval)
              }
            } else {
              reject();
              clearInterval(interval)
            }
          }, 200)
        });
      }

      getPreorderTextForVariant(variantId) {
        if(typeof this.vpreorder_texts[this.variant] !== "undefined") {
          this.preorder_old = this.preorder_text;
          this.preorder_text = this.vpreorder_texts[this.variant];
        } else if(typeof this.vpreorder_texts["*"] !== "undefined") {
          this.preorder_old = this.preorder_text;
          this.preorder_text = this.vpreorder_texts["*"];
        } else {
          this.preorder_text = this.preorder_text_default;
        }

        const regex = /{ ?inventory_quantity ?\| plus:(\d*) }/gm;
        const match = regex.exec(this.preorder_text);
        if(match !== null) {
          this.preorder_text = this.preorder_text.replace(regex, Number(match[1]) + Number(this.inventory));
        }
      }
      
      onVariantChange() {
        this.inventory = this.getVariantInventory(this.variant);
        this.getPreorderTextForVariant(this.variant);
        this.templateParse();
      }
      
      onVariantObserver() {
        addEventListener("variant:changed", (variantObj) => {
          let variant = variantObj.detail.variant.id;
          if(variant !== this.variant) {
            this.variant = variant;
            this.onVariantChange();
          }
        });
      }
      
      md5(inputString) {
          var hc="0123456789abcdef";
          function rh(n) {var j,s="";for(j=0;j<=3;j++) s+=hc.charAt((n>>(j*8+4))&0x0F)+hc.charAt((n>>(j*8))&0x0F);return s;}
          function ad(x,y) {var l=(x&0xFFFF)+(y&0xFFFF);var m=(x>>16)+(y>>16)+(l>>16);return (m<<16)|(l&0xFFFF);}
          function rl(n,c)            {return (n<<c)|(n>>>(32-c));}
          function cm(q,a,b,x,s,t)    {return ad(rl(ad(ad(a,q),ad(x,t)),s),b);}
          function ff(a,b,c,d,x,s,t)  {return cm((b&c)|((~b)&d),a,b,x,s,t);}
          function gg(a,b,c,d,x,s,t)  {return cm((b&d)|(c&(~d)),a,b,x,s,t);}
          function hh(a,b,c,d,x,s,t)  {return cm(b^c^d,a,b,x,s,t);}
          function ii(a,b,c,d,x,s,t)  {return cm(c^(b|(~d)),a,b,x,s,t);}
          function sb(x) {
              var i;var nblk=((x.length+8)>>6)+1;var blks=new Array(nblk*16);for(i=0;i<nblk*16;i++) blks[i]=0;
              for(i=0;i<x.length;i++) blks[i>>2]|=x.charCodeAt(i)<<((i%4)*8);
              blks[i>>2]|=0x80<<((i%4)*8);blks[nblk*16-2]=x.length*8;return blks;
          }
          var i,x=sb(inputString),a=1732584193,b=-271733879,c=-1732584194,d=271733878,olda,oldb,oldc,oldd;
          for(i=0;i<x.length;i+=16) {olda=a;oldb=b;oldc=c;oldd=d;
              a=ff(a,b,c,d,x[i+ 0], 7, -680876936);d=ff(d,a,b,c,x[i+ 1],12, -389564586);c=ff(c,d,a,b,x[i+ 2],17,  606105819);
              b=ff(b,c,d,a,x[i+ 3],22,-1044525330);a=ff(a,b,c,d,x[i+ 4], 7, -176418897);d=ff(d,a,b,c,x[i+ 5],12, 1200080426);
              c=ff(c,d,a,b,x[i+ 6],17,-1473231341);b=ff(b,c,d,a,x[i+ 7],22,  -45705983);a=ff(a,b,c,d,x[i+ 8], 7, 1770035416);
              d=ff(d,a,b,c,x[i+ 9],12,-1958414417);c=ff(c,d,a,b,x[i+10],17,     -42063);b=ff(b,c,d,a,x[i+11],22,-1990404162);
              a=ff(a,b,c,d,x[i+12], 7, 1804603682);d=ff(d,a,b,c,x[i+13],12,  -40341101);c=ff(c,d,a,b,x[i+14],17,-1502002290);
              b=ff(b,c,d,a,x[i+15],22, 1236535329);a=gg(a,b,c,d,x[i+ 1], 5, -165796510);d=gg(d,a,b,c,x[i+ 6], 9,-1069501632);
              c=gg(c,d,a,b,x[i+11],14,  643717713);b=gg(b,c,d,a,x[i+ 0],20, -373897302);a=gg(a,b,c,d,x[i+ 5], 5, -701558691);
              d=gg(d,a,b,c,x[i+10], 9,   38016083);c=gg(c,d,a,b,x[i+15],14, -660478335);b=gg(b,c,d,a,x[i+ 4],20, -405537848);
              a=gg(a,b,c,d,x[i+ 9], 5,  568446438);d=gg(d,a,b,c,x[i+14], 9,-1019803690);c=gg(c,d,a,b,x[i+ 3],14, -187363961);
              b=gg(b,c,d,a,x[i+ 8],20, 1163531501);a=gg(a,b,c,d,x[i+13], 5,-1444681467);d=gg(d,a,b,c,x[i+ 2], 9,  -51403784);
              c=gg(c,d,a,b,x[i+ 7],14, 1735328473);b=gg(b,c,d,a,x[i+12],20,-1926607734);a=hh(a,b,c,d,x[i+ 5], 4,    -378558);
              d=hh(d,a,b,c,x[i+ 8],11,-2022574463);c=hh(c,d,a,b,x[i+11],16, 1839030562);b=hh(b,c,d,a,x[i+14],23,  -35309556);
              a=hh(a,b,c,d,x[i+ 1], 4,-1530992060);d=hh(d,a,b,c,x[i+ 4],11, 1272893353);c=hh(c,d,a,b,x[i+ 7],16, -155497632);
              b=hh(b,c,d,a,x[i+10],23,-1094730640);a=hh(a,b,c,d,x[i+13], 4,  681279174);d=hh(d,a,b,c,x[i+ 0],11, -358537222);
              c=hh(c,d,a,b,x[i+ 3],16, -722521979);b=hh(b,c,d,a,x[i+ 6],23,   76029189);a=hh(a,b,c,d,x[i+ 9], 4, -640364487);
              d=hh(d,a,b,c,x[i+12],11, -421815835);c=hh(c,d,a,b,x[i+15],16,  530742520);b=hh(b,c,d,a,x[i+ 2],23, -995338651);
              a=ii(a,b,c,d,x[i+ 0], 6, -198630844);d=ii(d,a,b,c,x[i+ 7],10, 1126891415);c=ii(c,d,a,b,x[i+14],15,-1416354905);
              b=ii(b,c,d,a,x[i+ 5],21,  -57434055);a=ii(a,b,c,d,x[i+12], 6, 1700485571);d=ii(d,a,b,c,x[i+ 3],10,-1894986606);
              c=ii(c,d,a,b,x[i+10],15,   -1051523);b=ii(b,c,d,a,x[i+ 1],21,-2054922799);a=ii(a,b,c,d,x[i+ 8], 6, 1873313359);
              d=ii(d,a,b,c,x[i+15],10,  -30611744);c=ii(c,d,a,b,x[i+ 6],15,-1560198380);b=ii(b,c,d,a,x[i+13],21, 1309151649);
              a=ii(a,b,c,d,x[i+ 4], 6, -145523070);d=ii(d,a,b,c,x[i+11],10,-1120210379);c=ii(c,d,a,b,x[i+ 2],15,  718787259);
              b=ii(b,c,d,a,x[i+ 9],21, -343485551);a=ad(a,olda);b=ad(b,oldb);c=ad(c,oldc);d=ad(d,oldd);
          }
          return rh(a)+rh(b)+rh(c)+rh(d);
      }
      
      getQuickviewData() {
        let dataHolder = document.querySelector("#geolizr-quickview");
        let jsonData = dataHolder.innerText;
        let data = null;
        if(jsonData != null) {
        	data = JSON.parse(jsonData);  
        }
        
        return data;
      }
      
      readQuickviewData() {
        let dataHolders = document.querySelectorAll(".geolizr-quickview");
        dataHolders.forEach(dataHolder => { 
          if(dataHolder.getAttribute("data-quickview-key") == null) {
            let jsonData = dataHolder.innerText;
            let dataKey = this.md5(jsonData);
            let data = null;
            if(jsonData && typeof this.quickViewOldJson[dataKey] === "undefined") {
              this.activeQuickView = dataKey;
              this.quickViewOldJson[dataKey] = jsonData;
              dataHolder.setAttribute("data-quickview-key", dataKey);
              data = JSON.parse(jsonData);
              let target = dataHolder.previousElementSibling;
              this.target = target;
              this.quickView(data);
              // clearInterval(this.quickViewIntervalId);
              return
            }            
          } else if(dataHolder.closest('.drawer').hasAttribute("open")) {
            let dataKey = dataHolder.getAttribute("data-quickview-key")
            if(this.activeQuickView !== dataKey) {
              this.activeQuickView = dataKey;
              let jsonData = this.quickViewOldJson[dataKey];
              let data = JSON.parse(jsonData);
              let target = dataHolder.previousElementSibling;
              this.target = target;
              this.quickView(data);              
            }
          }
        });
      }
      
      onQuickViewObserver() {
        this.quickViewOldJson = {};
        this.quickViewIntervalId = setInterval(() => { this.readQuickviewData() }, 200);
      }
      
      init(geoData, elementTarget, dataElement, inventoryBreaks) {
        this.geoData = geoData;
        this.inventory_zero = inventoryBreaks[0];
        this.inventory_less = inventoryBreaks[1];
        this.target = document.querySelector(elementTarget);
        if(this.target === null) {
          console.error("GeolzrLighter Element not found");
        }
        this.getData();
        // this.templateParse();
        this.insertTemplateDom(this.inventory, this.getInnerText(this.inventory), 0).then(() => this.templateParse());
        this.target.classList.add("shiping-badge-show");
        this.onVariantObserver();
        this.onQuickViewObserver();
      }
      
      quickView(data) {
        this.variant           = data.variant;
        this.inventory         = data.inventory;
        this.tags              = data.tags_raw.split("#");
        this.preorder_text     = data.preorder_text;
        this.preorder_button   = data.preorder_button;
        this.preorder_old      = "";
        this.vpreorder_texts   = data.vpreorder_texts || {};
        this.geo_block         = data.geo_block;
        this.variant_inventory = data.variant_inventory;
        if(typeof this.preorder_text !== "undefined" && this.preorder_text != "") {
          this.vpreorder_texts["*"] = this.preorder_text;
        }
        this.getPreorderTextForVariant(this.variant);
        this.templateParse();
        this.onVariantObserver();
      }

      getData() {
        if(this.type == "quickview") {
          this.quickView(this.getQuickviewData());
          return;
        }
        this.variant               = "{{ variant.id }}";
        this.inventory             = "{{ variant.inventory_quantity }}";
        this.tags                  = "{{ product.tags | join:"#" | downcase }}".split("#");
        this.preorder_text_default = "{{ product.metafields.translation.preorder_text }}";
        this.preorder_text         = "{{ product.metafields.translation.preorder_text }}";
        this.preorder_button       = "{{ product.metafields.translation.preorder_button }}";
        this.vpreorder_texts       = JSON.parse('{{ product.metafields.translation.vpreorder_text }}' || '{}');
        this.geo_block             = JSON.parse('{{ product.metafields.geolizr.geo_block | split: "," | json }}');
        this.variant_inventory     = [{%- for v in product.variants -%}{"id":{{v.id}},"inventory_quantity":{{v.inventory_quantity}},"inventory_management":"{{v.inventory_management}}","inventory_policy":"{{v.inventory_policy}}"}{% if forloop.last == false %},{% endif %}{%- endfor -%}];
        if(typeof this.preorder_text !== "undefined" && this.preorder_text != "") {
          this.vpreorder_texts["*"] = this.preorder_text;
        }
        this.getPreorderTextForVariant(this.variant);
      }

      getClassName(inventory) {
        if(inventory == 0) return "geolizr-location-zero";
        if(inventory > this.inventory_less) return "geolizr-location-full";
        return "geolizr-location-less";
      }

      getTextFor(country) {
        for(let i = 0; i < this.settings.country.length; i++) {
          let innerCountry = this.settings.country[i];
          if(innerCountry.country_code == country) {
            return innerCountry.text;
          }
        };

        return this.settings.fallback_text;
      }

      getPreTextObject(inventory) {
        let hasSecondPart = false;
        let text = this.settings.zero_text;

        if(this.settings.show_exact_product_inventory == true) {
          if(inventory > this.inventory_less) {
            hasSecondPart = true;
            text = this.settings.exact_inventory_full_text.replace('{inventory}',inventory);
          } else if (inventory == 1) {
            hasSecondPart = true;
            text = this.settings.exact_inventory_less_text_singular;
          } else if(inventory > this.inventory_zero) {
            hasSecondPart = true;
            text = this.settings.exact_inventory_less_text.replace('{inventory}',inventory);
          }
        } else {
          if(inventory > this.inventory_less) {
            hasSecondPart = true;
            text = this.settings.full_text;
          } else if(inventory > this.inventory_zero) {
            hasSecondPart = true;
            text = this.settings.less_text;
          }
        }
        
        return {"hasSecondPart": hasSecondPart, "text": text};
      }

      getInnerText(inventory) {
        if(this.preorder_text) return this.setPreorderText();

        let country = this.geoData.country.code;
        let textParts = [];
        let preTextObject = this.getPreTextObject(inventory);
        textParts.push(preTextObject.text);
        if(preTextObject.hasSecondPart) {
         textParts.push(this.getTextFor(this.geoData.country.code));
        }

        return textParts.filter(n => n).join(" - ");                
      }

      isBlock() {
        return this.geo_block.indexOf(this.geoData.country.code) > -1;
      }

      blockPopup() {
        let ll = this;
        let showSwal = function() {
          ll.showBlockPopup = true;
          Swal.fire({
            'title': '',
            'text':  ll.settings.block_text,
            'icon': 'info',
            'confirmButtonColor': '#666A6E',
            'showClass': {
              'popup': 'geolizr-block-popup'
            }
          }).then((result) => {
            ll.showBlockPopup = false;
          });
        }

        if(typeof Swal !== "undefined" && this.showBlockPopup !== true) {
          showSwal();
        } else {
          Geolizr.loadScript('https://cdn.jsdelivr.net/npm/sweetalert2@11', function() {
            showSwal();
          });
        }

      }

      blockButton() {
        document.querySelector('#shipping-badge-wrapper').style.display = "none";
        let addToCart = document.querySelector('#AddToCart');
        addToCart.innerText = this.settings.button_block_text;
        addToCart.style.backgroundColor = 'gray';
        addToCart.style.border = '1px solid black';
       
        addToCart.classList.add('geolizr-disabled');
        addToCart.classList.add('product-form__add-button');
        addToCart.classList.add('button--ternary');
        addToCart.classList.add('button--full');
        
        addToCart.classList.add('disabled');
        addToCart.setAttribute('disabled', true);

        if(this.removeCbb === false) {
          this.waitOnPageRender('.cbb-frequently-bought-container').then(function() {
            let cbbBlock = document.querySelector('.cbb-frequently-bought-container');
            if(cbbBlock !== null) {
              this.removeCbb = true;
              cbbBlock.parentNode.removeChild(cbbBlock); 
            }
          }).catch(function(e) {
            Geolizr.gl.init(geoData, "#geolizr-location-light", "#geolizr-location-light-data", [0, 20]);
            if(typeof e !== "undefined") {
              console.error(e);          
            }
          });;
        }
      }

      getType() {
        if(this.isBlock() === true) {
          return "block"
        } else if(this.preorder_text && this.preorder_text.length > 0) {
          return "preorder"
        }
        return "default-light"
      }

      insertTemplateDom(inventory, innerText, timeout) {
        return new Promise((resolve, reject) => {
          if(typeof timeout === "undefined") timeout = 400;
          Geolizr.gl.target.classList.remove("shiping-badge-show");

          setTimeout(() => {
            let template = document.querySelector('#geolizr_location_light_script_template');
            let button = document.querySelector('#AddToCart .loader-button__text');
            Geolizr.gl.target.innerHTML = template.innerHTML;
            let className = Geolizr.gl.getClassName(inventory);
            this.target.querySelector('#shipping-badge').classList.add(className);
            this.target.querySelector('#shipping-badge .inner').innerHTML = innerText;
            if(button && this.preorder_button) {
              button.innerHTML = this.preorder_button;
            }

            Geolizr.gl.target.classList.add("shiping-badge-show");
            resolve();
          }, timeout);
        });
      }

      setPreorderText() {
        this.insertTemplateDom(100, this.preorder_text).then(function() {
          document.querySelector('#shipping-badge-wrapper').classList.add('preorder_show');
        });
        return this.preorder_text;
      }

      templateParse() {
        let productType = this.getType();

        switch(productType) {
          case "block":
            this.blockPopup();
            this.blockButton();          
            break;

          case "preorder":
            this.setPreorderText();
            break;

          default:
            this.insertTemplateDom(this.inventory, this.getInnerText(this.inventory));
            break;

        }

        // view the produt form
        let productForm = document.querySelector('.product_section .product_form');
        if(productForm !== null) {
          document.querySelector('.product_section .product_form').style.opacity = "1";  
        }
      }

      getCookie(c_name) {
          let c_value = " " + document.cookie;
          let c_start = c_value.indexOf(" " + c_name + "=");
          if (c_start == -1) {
              c_value = null;
          }
          else {
              c_start = c_value.indexOf("=", c_start) + 1;
              let c_end = c_value.indexOf(";", c_start);
              if (c_end == -1) {
                  c_end = c_value.length;
              }
              c_value = unescape(c_value.substring(c_start,c_end));
          }
          return c_value;
      }
    
      getGeoData() {
        return new Promise((resolver, reject) => {
          let geoDataJson = this.getCookie('geolizr_geodata');
          if(typeof geoDataJson == "string") {
            resolver(JSON.parse(geoDataJson));
          } else {
            Geolizr.getGeoData(function(geodata) {
              resolver(geodata);
            });
          }
        });
      }

      getVariantInventory(variantId) {
        for(let i = 0; i < this.variant_inventory.length; i++) {
          let variant = this.variant_inventory[i];
          if(variant.id == variantId) {
            let quantity = variant.inventory_quantity;
            if(quantity < 0) quantity = 0;
            return quantity;
          }
        }
        return 0;
      }
	    
      domReady() {
        return new Promise(function(resolver, reject) {
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', resolver);
          } else {
            resolver();
          }
        });
      }
    }

    let initGeolizrLocationLight = function(geoData) {
      Geolizr.gl.waitOnPageRender("#geolizr-location-light").then(function() {
        Geolizr.gl.init(geoData, "#geolizr-location-light", "#geolizr-location-light-data", [0, {{ section.settings.less_breakpoint }}]);
      }).catch(function(e) {
        if(typeof e !== "undefined") {
          console.error(e);
        }
      });

      let blockElements = document.querySelectorAll(".gb-" + geoData.country.code);
      if(blockElements != null) {
          blockElements.forEach(block => { block.style.display = "none" });
      } else {
        Geolizr.gl.domReady().then(() => {
          setTimeout(() => {
            blockElements = document.querySelectorAll(".gb-" + geoData.country.code);
            Geolizr.gl.waitOnPageRender(blockElements).then(function() {
              blockElements.forEach(block => { block.style.display = "none" });
            }).catch(function(e) {
              if(typeof e !== "undefined") {
                console.error(e);
              }
            });
          }, 5000);                        
        });
      

      }

    }

    if(typeof Geolizr !== "undefined" && typeof Geolizr.gl == "undefined") {
      Geolizr.gl = new GeolizrLight();
      Geolizr.gl.domReady().then(function() {
        if (Shopify.designMode) {
          let geoData = {
            "country": {
              "code": Geolizr.lightSettings.debug_country
            },
            "designMode": true,
          }
          document.addEventListener('shopify:section:load', function(sectionId) { 
            // init also if the section load after document load
            initGeolizrLocationLight(geoData); 
          });
          initGeolizrLocationLight(geoData);
        } else {
          if(document.querySelectorAll(".geolizr-quickview").length) Geolizr.gl.type = "quickview";
          Geolizr.gl.getGeoData().then((geoData) => {
            initGeolizrLocationLight(geoData);
          });
        }
      });
      
    }
  }
  </script>
</section>
  
{% schema %}
  {
    "name": "Geolizr Location light",
    "class": "shopify-section--geolizr-light",
    "settings": [
    {
      "id": "debug_country",
      "type": "text",
      "label": "Test Country Iso Code (DE, US, etc.)",
      "default": "DE"
	},
	{
      "id": "less_breakpoint",
      "type": "number",
      "label": "Break from less to full",
      "default": 6
	},
	{
        "type": "text",
        "id": "geolizr_location_parts_full",
		"label": "Full Stock Text. Add metafield translation.preorder_text.",
		"default": "In Stock"
      },
      {
        "type": "text",
        "id": "geolizr_location_fallback_text",
        "label": "Full Stock Text fallback for not supported Countries.",
        "default": "Delivery within a few days!"
      },
      {
        "type": "text",
        "id": "geolizr_location_geo_block_text",
        "label": "Geoblock by Metafields Text.",
        "default": "UNFORTUNATELY LIQUID CHALK IS NOT AVAILABLE IN YOUR COUNTRY DUE TO SHIPPING"
      },
      {
        "type": "text",
        "id": "geolizr_location_geo_block_text_popup",
        "label": "Geoblock by Metafields Text for the Popup.",
        "default": "UNFORTUNATELY LIQUID CHALK IS NOT AVAILABLE IN YOUR COUNTRY DUE TO SHIPPING"
      },
      {
        "type": "text",
        "id": "geolizr_location_parts_less",
        "label": "Less Stock Text",
        "default": "Few pieces in stock"
      },
      {
        "type": "text",
        "id": "geolizr_location_parts_zero",
        "label": "Not on Stock Text",
		"default": "Currently out of stock"
      },
      {
        "type": "checkbox",
        "id": "show_exact_product_inventory",
        "label": "Show exact product inventory",
        "default": false
      },
      {
        "type": "text",
        "id": "geolizr_location_exact_parts_full",
		"label": "Full Stock Text with inventory",
		"default": "{inventory} in Stock"
      },
      {
        "type": "text",
        "id": "geolizr_location_exact_parts_less_singular",
        "label": "One item left Stock with inventory Text",
        "default": "Only one left in stock"
      },
      {
        "type": "text",
        "id": "geolizr_location_exact_parts_less",
        "label": "Less Stock with inventory Text",
        "default": "Only {inventory} left in stock"
      },
      {
        "type": "textarea",
        "id": "geolizr_location_parts",
        "label": "Geolizr Location Parts",
		"default": "DE=>Delivery in 1-3 days\nFR=>Delivery in 2-4 days\nIT=>Delivery in 2-4 days\nCH=>Delivery in 2-4 days\nAT=>Delivery in 2-4 days\nUS=>Delivery in 2-4 days\nNL=>Delivery in 2-4 days\nCZ=>Delivery in 2-4 days\nGR=>Delivery in 3-6 days\nES=>Delivery in 3-6 days\nBEL=>Delivery in 2-4 days\nUK=>Delivery in 3-6 days\nSE=>Delivery in 3-6 days"
      }],
      "presets": [
        {
          "name": "Geolizr Light",
          "settings": {}
        }
      ]
  }
{% endschema %}

{% stylesheet %}



{% endstylesheet %}

{% javascript %}
{% endjavascript %}
